Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: dev
        
    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16
    
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.2.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.3.0/24

    # Server Parameters
    UbuntuServerAMI:
        Description: Please enter the AMI ID for the Ubuntu Server
        Type: String

    KeyName:
        Description: Please enter the name of an existing EC2 KeyPair to enable SSH access to the instance
        Type: String
    
    InstanceType:
        Description: Please enter the instance type you would like to use
        Type: String
    
    VolumeSize:
        Description: Please enter the size of the EBS volume you would like to use
        Type: String

Resources:
    # Creating VPC
    VPC: 
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsHostnames: true
          Tags: 
              - Key: Name 
                Value: !Ref EnvironmentName

    InternetGateway: # Allows Communication between VPC and internet
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    # Attach internet gateway to the vpc     
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    # Subnets

    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    # Elastic IP for natgateway on public subnet1 
    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

    # Elastic IP for natgateway on public subnet2
    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc
    
    # NAT Gateways
    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2    

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    # Security Groups

    #Creating Server Security Group
    AppServerSecurityGroup:
        Type:
            AWS::EC2::SecurityGroup
        Properties:
            DependsOn:
                - VPC
            GroupDescription:
                !Sub ${EnvironmentName} App Server Security Group
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: http
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: -1
                  FromPort: -1
                  ToPort: -1
                  CidrIp: 0.0.0.0/0 #Not for production use

    #Creating Load Balancersecurity Group
    LoadBalancerSecurityGroup:
        DependsOn:
            - VPC
        Type:
            AWS::EC2::SecurityGroup
        Properties:
            GroupDescription:
                !Sub ${EnvironmentName} Load Balancer Security Group
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: http
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    #Creating Servers
    AppLaunchConfiguration:
        Type:
            AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64:
                # Install Apache Web Server, Start it, and create an index.html that will be displayed on the web server
                    !Sub |
                        #!/bin/bash
                        apt-get update -y
                        apt-get install apache2 -y
                        systemctl start apache2.service
                        cd /var/www/html
                        echo "Udacity Demo Web Server Up and Running!" > index.html
                ImageId: !Ref UbuntuServerAMI
                KeyName: !Ref KeyName
                SecurityGroups:
                    - !Ref AppServerSecurityGroup
                InstanceType: !Ref InstanceType
                BlockDeviceMappings:
                    - DeviceName: /dev/sdk
                      Ebs:
                        VolumeSize: !Ref VolumeSize
                        VolumeType: gp2    
    
    AppAutoScalingGroup:
        Type:
            AWS::AutoScaling::AutoScalingGroup
        Properties:
            DependsOn:
                - PrivateSubnet1
                - PrivateSubnet2
                - LaunchConfiguration
            VPCZoneIdentifier:
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
            LaunchConfigurationName:
                Ref: AppLaunchConfiguration
            MinSize: 4
            MaxSize: 6
            DesiredCapacity: 4
            TargetGroupARNs:
                - !Ref AppTargetGroup
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} App AutoScalingGroup

    #Creating Load Balancer on a public subnet
    AppLoadBalancer:
        DependsOn: 
            - PublicSubnet1
            - PublicSubnet2
        Type:
            AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets: 
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            SecurityGroups:
                - !Ref LoadBalancerSecurityGroup
    
    #Creating Listener
    LoadBalancerListener:
        Type:
            AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn:
                Ref: AppLoadBalancer
            Protocol: HTTP
            Port: 80
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                    Ref: AppTargetGroup

    #LoadBalancer Listener rule
    LoadBalancerListenerRule:
        Type:
            AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref LoadBalancerListener
            Conditions:
                - Field: path-pattern
                  Values:
                    - /
            Actions:
                - Type: forward
                  TargetGroupArn:
                    Ref: AppTargetGroup
            Priority: 1

    #Creating Target Group
    AppTargetGroup:
        DependsOn:
            - VPC
        Type:
            AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name:
                !Sub ${EnvironmentName} App Target Group
            Protocol: HTTP
            Port: 80
            VpcId: !Ref VPC
            HealthCheckProtocol: HTTP
            HealthCheckPort: "80"
            HealthCheckPath: "/"
            HealthCheckIntervalSeconds: 30
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            UnhealthyThresholdCount: 5

    #Creating IAM Role
    AppIAMRole:
        Type:
            AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - ec2.amazonaws.com
                        Action:
                            - sts:AssumeRole
            Path: /
    
    #Creating policy to be associated with the IAM Role
    AppIAMPolicy:
        Type:
            AWS::IAM::ManagedPolicy
        Properties:
            PolicyName:
                !Sub ${EnvironmentName} App IAM Policy
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - 's3:*'
                      Resource: '*'
            Roles:
                - !Ref AppIAMRole    
                          
            

#Outputs for the VPC            
Outputs: 
    AppLoadBalancer:
        Description: A reference to the created Load Balancer
        #Adding http:// on load balancer url for easier access
        Value: !Sub http://!GetAtt AppLoadBalancer.DnsName
        Export:
            Name: !Sub ${EnvironmentName}-APP-LB-URL

    AppIAMRole:
        Description: A reference to the created IAM Role
        Value: !Ref AppIAMRole
        Export:
            Name: !Sub ${EnvironmentName}-IAM-ROLE
    
# The following resource(s) failed to create: [InternetGateway, PrivateRouteTable1, PrivateSubnet1, AppTargetGroup, AppServerSecurityGroup, PublicRouteTable]. Rollback requested by user.