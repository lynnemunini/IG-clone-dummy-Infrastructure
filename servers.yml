Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        
    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16
    
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.2.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.3.0/24

    # Server Parameters
    UbuntuServerAMI:
        Description: Please enter the AMI ID for the Ubuntu Server
        Type: String

    KeyName:
        Description: Please enter the name of an existing EC2 KeyPair to enable SSH access to the instance
        Type: String
    
    InstanceType:
        Description: Please enter the instance type you would like to use
        Type: String
    
    VolumeSize:
        Description: Please enter the size of the EBS volume you would like to use
        Type: String
  
    
Resources:
    #Creating VPC
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName

    #Allows communication between VPC and Internet
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    #Attach InternetGateway to the VPC        
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    #Subnets
    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    #Elastic IP for natgateway on public subnet 1
    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

    #Elastic IP for natgateway on public subnet 2
    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    #NatGateways
    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
    

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    # Security Groups

    # Creating Load Balancer Security Group
    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            DependsOn: VPC
            GroupDescription: Load Balancer Security Group
            VpcId: !Ref VPC
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0

    # Creating App Server Security Group
    AppServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            DependsOn: VPC
            GroupDescription: App Server Security Group
            VpcId: !Ref VPC
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: -1
              FromPort: -1
              ToPort: -1
              CidrIp: 0.0.0.0/0

    #Creating Servers
    AppLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            IamInstanceProfile:
                Ref: AppInstanceProfile
            UserData:
                #Install Apache Web Server, Start it, and create an index.html that will be displayed on the web server
                Fn::Base64: !Sub |
                        #!/bin/bash
                        apt-get update -y
                        apt-get install apache2 -y
                        systemctl start apache2.service
                        cd /var/www/html
                        echo "Udacity Demo Web Server Up and Running!" > index.html       
            ImageId: !Sub "${UbuntuServerAMI}"
            KeyName: !Sub "${KeyName}"
            SecurityGroups:
            - Ref: AppServerSecGroup
            InstanceType: !Sub "${InstanceType}"
            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: !Sub "${VolumeSize}"
                VolumeType: gp2

    #Creating AutoScaling Group
    AppAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            DependsOn: PrivateSubnet1, PrivateSubnet2, AppLaunchConfiguration
            VPCZoneIdentifier:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            LaunchConfigurationName:
                Ref: AppLaunchConfiguration
            MinSize: '4'
            MaxSize: '6'
            TargetGroupARNs:
            - Ref: AppTargetGroup

    #Creating Load Balancer on a public subnet
    AppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            DependsOn: PublicSubnet1, PublicSubnet2
            Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
            SecurityGroups:
            - Ref: LoadBalancerSecurityGroup

    #Creating Listener
    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: AppTargetGroup
            LoadBalancerArn:
              Ref: AppLoadBalancer
            Port: '80'
            Protocol: HTTP

    #Creating Listener Rule
    LoadBalancerListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'AppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'LoadBalancerListener'
            Priority: 1

    #Creating Target Group
    AppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            DependsOn: VPC
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !Ref VPC

    #Creating IAM Role to allow EC2 Instances to access the s3 service
    AppInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
            - !Ref IAMRole
    
    #Creating IAM Role
    IAMRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service: ec2.amazonaws.com
                  Action: sts:AssumeRole
            Path: /
            Policies:
            - PolicyName: AppServerPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Action:
                  - s3:*
                  Resource:
                  - '*'      

#Outputs for the VPC            
Outputs: 
    AppLoadBalancer:
        Description: A reference to the created Load Balancer
        #Adding http:// on load balancer url for easier access
        Value: 
            Fn::Join:
                - ""
                - ["http://", Fn::GetAtt: [AppLoadBalancer,DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-APP-LB-URL

    AppIAMRole:
        Description: A reference to the created IAM Role
        Value: !Ref IAMRole
        Export:
            Name: !Sub ${EnvironmentName}-IAM-ROLE